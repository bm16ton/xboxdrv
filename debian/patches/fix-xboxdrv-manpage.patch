Description: Fix xboxdrv.1 errors reported by lintian
 Fix all hyphen-used-as-minus-sign and spelling-error-in-manpage reports.
Author: Andrey Rahmatullin <wrar@debian.org>
Forwarded: no
Last-Update: 2016-03-20

diff --git a/doc/xboxdrv.1 b/doc/xboxdrv.1
index d801ea7..2ed5c33 100644
--- a/doc/xboxdrv.1
+++ b/doc/xboxdrv.1
@@ -56,7 +56,7 @@ for more information.
 \*(T<\fB\-h\fR\*(T>, \*(T<\fB\-\-help\fR\*(T>
 Display help text and exit.
 .TP 
--V, --version
+\-V, \-\-version
 Print the version number and exit.
 .TP 
 \*(T<\fB\-v\fR\*(T>, \*(T<\fB\-\-verbose\fR\*(T>
@@ -144,8 +144,8 @@ files. Regular key/value pairs must go into the
 [xboxdrv] section. '#' and ';' can be used for comments.
 Key names have for most part the same name as command
 line options. Command line options that take a list of
-input mappings (--ui-buttonmap, --ui-axismap,
---evdev-absmap, ...) can be split of into their own
+input mappings (\-\-ui\-buttonmap, \-\-ui\-axismap,
+\-\-evdev\-absmap, ...) can be split of into their own
 section for better readability.
 
 The \*(T<\fIexamples/\fR\*(T> directory contains
@@ -347,7 +347,7 @@ xpad module loaded and want to use xboxdrv without
 unloading it.
 .TP 
 \*(T<\fB\-\-generic\-usb\-spec\fR\*(T> \fINAME=VALUE,...\fR
-Allows to specify from which
+Allows one to specify from which
 endpoint \*(T<\fBgeneric\-usb\fR\*(T> will read. The
 spec as the form
 of \fINAME=VALUE,...\fR. Allowed values are:
@@ -727,7 +727,7 @@ Add a modifier to the modifier stack, see
 a full list of possible modifier.
 .TP 
 \*(T<\fB\-\-timeout \fR\*(T>\fIMSEC\fR
-Specify the number of miliseconds that xboxdrv will wait
+Specify the number of milliseconds that xboxdrv will wait
 for events from the controller before moving on and
 processing things like auto-fire or relative-axis.
 Default value is 10, smaller values will give you a
@@ -789,7 +789,7 @@ T}
 T{
 lt(7), rt(8)
 T}	T{
-analog trigger (needs --trigger-as-button option)
+analog trigger (needs \-\-trigger\-as\-button option)
 T}
 T{
 tl, tr
@@ -799,7 +799,7 @@ T}
 T{
 du(up), dd(down), dl(left), dr(right)
 T}	T{
-dpad directions (needs --dpad-as-button option)
+dpad directions (needs \-\-dpad\-as\-button option)
 T}
 T{
 green, red, yellow, blue, orange
@@ -811,7 +811,7 @@ T}
 Just like with \*(T<\fB\-\-ui\-buttonmap\fR\*(T> you can add button filter to each button.
 .TP 
 \*(T<\fB\-\-axismap\fR\*(T> \fIAXIS=MAPPING,...\fR
-Axis remapping is available via --axismap and works the same as button
+Axis remapping is available via \-\-axismap and works the same as button
 mapping. In addition you can supply a sign to indicate that an axis
 should be inverted. So if you want to invert the y1 axis start with:
 
@@ -840,7 +840,7 @@ the order in which the options are given.
 .TP 
 \*(T<\fB\-\-autofire BUTTON=FREQUENCY,...\fR\*(T>
 Autofire mapping allows you to let a button automatically fire with a
-given frequency in miliseconds:
+given frequency in milliseconds:
 
 .nf
 \*(T<$ xboxdrv \-\-autofire A=250\*(T>
@@ -854,7 +854,7 @@ as autofire while another one, emitting the same signal, acts normally.
 .fi
 .TP 
 \*(T<\fB\-\-axis\-sensitivty \fR\*(T>\fIAXIS=SENSITIVITY\fR,...
-The sensitive of an axis can be adjusted via --axis-sensitivty:
+The sensitive of an axis can be adjusted via \-\-axis\-sensitivty:
 
 .nf
 \*(T<$ xboxdrv \-\-axis\-sensitivty X1=\-1.0,Y1=\-1.0\*(T>
@@ -863,7 +863,7 @@ The sensitive of an axis can be adjusted via --axis-sensitivty:
 A value of 0 gives you the default linear sensitivity,
 values larger then 0 will give you higher sensitivity,
 while values smaller then 0 will give you lower
-sensitivity. Sensitivity values in the range of [-1, 1]
+sensitivity. Sensitivity values in the range of [\-1, 1]
 will generally give good results, everything beyond that
 won't be of much practical use.
 
@@ -946,12 +946,12 @@ Will give you controls that are relative to your
 character instead of your viewpoint.
 .TP 
 \*(T<\fB\-\-four\-way\-restrictor\fR\*(T>
-The \*(T<\fB\-\-four\-way\-restrictor\fR\*(T> option allows to
+The \*(T<\fB\-\-four\-way\-restrictor\fR\*(T> option allows one to
 limit the movement on both analogsticks to only four
 directions (up, down, left, right), the diagonals (up/left,
 up/right, down/left, down/right) are filtered out from the
 output. This option is useful for games such as Tetris, that
-don't need diagonals and where you don't want to accidently
+don't need diagonals and where you don't want to accidentally
 trigger the down-move while trying to do a left/right move.
 .TP 
 \*(T<\fB\-\-relative\-axis AXIS=NUM,...\fR\*(T>
@@ -1082,7 +1082,7 @@ switch this behaviour off.
 \*(T<\fB\-\-device\-name NAME\fR\*(T>
 Changes the descriptive name the device will have. This
 options acts the same as
---device-names \fICURRENTSLOT\fR.auto=\fINAME\fR
+\-\-device\-names \fICURRENTSLOT\fR.auto=\fINAME\fR
 .TP 
 \*(T<\fB\-\-device\-names TYPE.SLOT=NAME,...\fR\*(T>
 Changes the descriptive name the device will
@@ -1097,7 +1097,7 @@ matches everything.
 Changes the vendor, product, version and bus id that the
 device will have. The last two arguments are optional.
 This options acts the same as
---device-usbids \fICURRENTSLOT\fR.auto=\fIVENDOR:PRODUCT:VERSION:BUS\fR
+\-\-device\-usbids \fICURRENTSLOT\fR.auto=\fIVENDOR:PRODUCT:VERSION:BUS\fR
 .TP 
 \*(T<\fB\-\-device\-usbids TYPE.SLOT=VENDOR:PRODUCT:VERSION:BUS,...\fR\*(T>
 Changes the vendor, product, version and bus id the device will
@@ -1177,7 +1177,7 @@ event. In that case you can supply additional paramaters in the form of:
 \fIVALUE\fR gives the value of the event (default: 10)
 
 \fIREPEAT\fR
-gives the number of milisecond to pass before the event
+gives the number of millisecond to pass before the event
 is fired again (default: 5)
 
 The special 'void' event allows you to clear any
@@ -1289,12 +1289,12 @@ is \fIVALUE\fR * axis_state.
 (default: 10)
 
 \fIREPEAT\fR
-gives the number of milisecond to pass before the event
+gives the number of millisecond to pass before the event
 is fired again (default: 5).
 
-The value of -1 has a special meaning, it will result in
+The value of \-1 has a special meaning, it will result in
 the REL event being fired as soon as possible (i.e.
-every \fItimeout\fR miliseconds).
+every \fItimeout\fR milliseconds).
 This is the recomment way for handling mouse emulation,
 as it will keep REL events syncronized and thus avoid
 jaggies in the movement, that will result from manually
@@ -1345,7 +1345,7 @@ handler, while \*(T<\fBKEY_A\fR\*(T> is an argument for the
 event handler. What kind of arguments an event handler allows
 depends on the event handler.
 .PP
-There is also a shorthand form of specifing event handlers by
+There is also a shorthand form of specifying event handlers by
 just writing:
 .PP
 .nf
@@ -1380,9 +1380,9 @@ An example for the hold button would look like:
 
 This will send JS_0 events when the button is pressed
 and switch to JS_1 events when the button was hold for
-500 miliseconds.
+500 milliseconds.
 
-The hold button feature is useful to effectly double the
+The hold button feature is useful to effectively double the
 number of available buttons, thus the dpad can for
 example be used to send out eight different button
 events instead of just four, which is enough to handle
@@ -1396,7 +1396,7 @@ The rel handler will send out a REL event whenever the
 button is pressed. \fIVALUE\fR
 gives the value of the event that will be send,
 while \fIREPEAT\fR gives the number
-of miliseconds till the event will be send again.
+of milliseconds till the event will be send again.
 
 A typical use for REL events is emulation of the scroll
 wheel of a mouse, an example configuration would be:
@@ -1465,7 +1465,7 @@ To move backwards through the sequence another key must
 be bound to \*(T<\fBsequence\-key\-ref\fR\*(T>.
 .TP 
 \*(T<\fBexec\fR\*(T>
-The exec button handler allows to launch an application
+The exec button handler allows one to launch an application
 when the button was pressed. An example would look like
 this:
 
@@ -1541,12 +1541,12 @@ is \fIVALUE\fR * axis_state.
 (default: 10)
 
 \fIREPEAT\fR
-gives the number of milisecond to pass before the event
+gives the number of millisecond to pass before the event
 is fired again (default: 5).
 
-The value of -1 has a special meaning, it will result in
+The value of \-1 has a special meaning, it will result in
 the REL event being fired as soon as possible (i.e.
-every \fItimeout\fR miliseconds).
+every \fItimeout\fR milliseconds).
 This is the recomment way for handling mouse emulation,
 as it will keep REL events syncronized and thus avoid
 jaggies in the movement, that will result from manually
@@ -1577,7 +1577,7 @@ in \fIVALUE\fR, by
 scaling \fIREPEAT\fR instead that
 problem is worked around.
 .SH "INPUT FILTER"
-Input filter allow to manipulate the events that come from the
+Input filters allow one to manipulate the events that come from the
 controller. They can be used
 on \*(T<\fB\-\-buttonmap\fR\*(T>, \*(T<\fB\-\-axismap\fR\*(T>, \*(T<\fB\-\-ui\-buttonmap\fR\*(T>
 and \*(T<\fB\-\-ui\-axismap\fR\*(T>. The difference between the
@@ -1599,15 +1599,15 @@ when it is not pressed and in unpressed state when it is
 pressed.
 .TP 
 \*(T<\fBauto\fR\*(T>, \*(T<\fBautofire\fR\*(T>:\fIRATE\fR:\fIDELAY\fR
-The autofire filter allows to repeatatly send button
+The autofire filter allows one to repeatedly send button
 press events when the button is held down. It takes two
 optional parameters:
 
 \fIRATE\fR is the number of
-miliseconds between button press events.
+milliseconds between button press events.
 
 \fIDELAY\fR the amount of
-miliseconds till the autofire will start, before that
+milliseconds till the autofire will start, before that
 delay the button will act as normal.
 .TP 
 \*(T<\fBclick\-press\fR\*(T>
@@ -1631,7 +1631,7 @@ signal a game or another application which configuration
 is currently active.
 .TP 
 \*(T<\fBdelay\fR\*(T>:\fITIME\fR
-A button has to be held down for TIME miliseconds before
+A button has to be held down for TIME milliseconds before
 it will emit an event, press events shorter then that will
 be ignored.
 .TP 
@@ -1752,7 +1752,7 @@ If you want to permanently unload it add the following line to
 .fi
 .PP
 Next you have to load the uinput kernel module which allows
-userspace programms to create virtual input devices and the
+userspace programs to create virtual input devices and the
 joydev module handles the \*(T<\fI/dev/input/jsX\fR\*(T>
 devices:
 .PP
@@ -1772,7 +1772,7 @@ start the userspace driver with:
 \*(T<$ xboxdrv\*(T>
 .fi
 .PP
-Or in case you don't have the neccesary rights (being in group root
+Or in case you don't have the necessary rights (being in group root
 should often be enough) start the driver as root via:
 .PP
 .nf
@@ -1799,7 +1799,7 @@ cases it is recomment to change the triggers to regular buttons via:
 .fi
 .SS "USING MULTIPLE CONTROLLER"
 If you want to use multiple wired controllers you need to start
-multiple instances of the xboxdrv driver and append the -i
+multiple instances of the xboxdrv driver and append the \-i
 argument to select the appropriate controller like this:
 .PP
 .nf
@@ -1854,7 +1854,7 @@ can limit which gamepad gets assigned to which slot with
 the \*(T<\fB\-\-match\fR\*(T> option.
 .PP
 Note that xboxdrv will create the virtual uinput devices on
-startup, not when a gamepad gets plugged in, this allows to
+startup, not when a gamepad gets plugged in, this allows one to
 plug in gamepads even after a game or an application like XBMC
 has already been launched and still have it all function
 properly. 
@@ -1924,7 +1924,7 @@ configuration in a game is most often not helpful, since you won't see
 the true cause beyond endless layers of abstraction between you and
 the actual events. Luckily there are a few tools you can use to test,
 all of these are command line based and it is recomment that you get
-familar with them when you want to do any more complex configuration.
+familiar with them when you want to do any more complex configuration.
 .SS EVTEST
 evtest lets you read raw input events from \*(T<\fI/dev/input/eventX\fR\*(T>. The
 event devices are the very core of all event handling, things like the
@@ -2060,7 +2060,7 @@ Start xboxdrv with:
 Your right analog stick will act as trottle control, the
 trigger as rudder. Using \*(T<\fB\-\-modifier\fR\*(T> to
 install a four-way restrictor might also be worth a
-consideration to not accidently touch the throttle when the
+consideration to not accidentally touch the throttle when the
 rudder is moved.
 .SS "USING MOUSE EMULATION AND JOYSTICK AT THE SAME TIME"
 To use mouse emulation and joystick at the same time you have
@@ -2206,7 +2206,7 @@ If you have success with that, send a patch
 to <\*(T<grumbel@gmail.com\*(T>>, if not, contact me too, I
 might be able to provide additional help.
 .PP
-As an alternative you can also use the --device and --type option to
+As an alternative you can also use the \-\-device and \-\-type option to
 enforce a USB device as well as a controller type an bypass any auto
 detection.
 .SS "\(dqUNKNOWN DATA: BYTES: 3 DATA: ...\(dq"
@@ -2237,7 +2237,7 @@ itself works with:
 .fi
 .SS "THE WIRELESS CONTROLLER DOESN'T WORK"
 You have to sync the controller befor it can be used, restart of the
-driver isn't needed and the driver should let you now when it recieves
+driver isn't needed and the driver should let you now when it receives
 a connection after you sync the controller.
 .SS "KEYBOARD EMULATION"
 When you try to let xboxdrv send a keyboard events
@@ -2349,7 +2349,7 @@ And insert the following lines:
 .fi
 .SS "PERMANENT WORKAROUND BY DISABLING DEVICE AUTO DETECTION"
 A fourth workaround involved disabling the autodetection of Xorg
-completly, you can do that by adding the following lines to
+completely, you can do that by adding the following lines to
 \*(T<\fI/etc/X11/xorg.conf\fR\*(T>:
 .PP
 .nf
