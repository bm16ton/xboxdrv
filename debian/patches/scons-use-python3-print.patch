Description: Use python3 print()
Author: Phil Wyett <philip.wyett@kathenas.org>
Last-Update: 2019-12-29
Bug-Debian: https://bugs.debian.org/947585

--- a/SConstruct
+++ b/SConstruct
@@ -16,7 +16,7 @@
     xml = subprocess.Popen(["dbus-binding-tool",
                             "--mode=glib-server",
                             "--prefix=" + env['DBUS_PREFIX'], source[0].get_path()],
-                           stdout=subprocess.PIPE).communicate()[0]
+                           stdout=subprocess.PIPE).communicate()[0].decode()
 
     xml = re.sub(r"callback = \(([A-Za-z_]+)\) \(marshal_data \? marshal_data : cc->callback\);",
                  r"union { \1 fn; void* obj; } conv;\n  "
@@ -31,10 +31,13 @@
     Takes a list of files and converts them into a C source that can be included
     """
     def c_escape(str): 
-        return str.translate(string.maketrans("/.-", "___"))
+        if 'maketrans' in dir(string):
+            return str.translate(string.maketrans("/.-", "___"))
+        else:
+            return str.translate(str.maketrans("/.-", "___"))
     
-    print target
-    print source
+    print (target)
+    print (source)
     with open(target[0].get_path(), "w") as fout:
         fout.write("// autogenerated by scons Bin2H builder, do not edit by hand!\n\n")
 
@@ -44,11 +47,11 @@
         # write down data
         for src in source:
             with open(src.get_path(), "rb") as fin:
-                data = fin.read()
+                data = fin.read().decode()
                 fout.write("// \"%s\"\n" % src.get_path())
                 fout.write("const char %s[] = {" % c_escape(src.get_path()))
                 bytes_arr = ["0x%02x" % ord(c) for c in data]
-                for i in xrange(len(bytes_arr)):
+                for i in range(len(bytes_arr)):
                     if i % 13 == 0:
                         fout.write("\n  ")
                     fout.write(bytes_arr[i])
@@ -133,12 +136,12 @@
 conf = Configure(env)
 
 if not conf.env['CXX']:
-    print "g++ must be installed!"
+    print ("g++ must be installed!")
     Exit(1)
 
 # X11 checks
 if not conf.CheckLibWithHeader('X11', 'X11/Xlib.h', 'C++'):
-    print 'libx11-dev must be installed!'
+    print ('libx11-dev must be installed!')
     Exit(1)
 
 env = conf.Finish()
